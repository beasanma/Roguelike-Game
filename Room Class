package pt.upskill.projeto1.objects;

import pt.upskill.projeto1.gui.ImageTile;
import pt.upskill.projeto1.objects.Characters.*;
import pt.upskill.projeto1.objects.Door.Door;
import pt.upskill.projeto1.objects.Inventory.GoodMeat;
import pt.upskill.projeto1.objects.Inventory.Hammer;
import pt.upskill.projeto1.objects.Inventory.Key;
import pt.upskill.projeto1.rogue.utils.Position;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;


public class Room {
    ArrayList<ImageTile> roomMap = new ArrayList<>();// vetor para conter a lista de imagens
    private Hero hero;
    ArrayList<Enemies> enemies = new ArrayList<>();

    //Precisa de construtor que devolve como parâmetro o filePath
    public Room(String filepath) {
        System.out.println("creating level Room is " + filepath);
        createRoom(filepath); // "uploads" no mapa
    }

    public void setHero(Hero hero) {
        this.hero = hero;
    }

    public ArrayList<ImageTile> getRoomMap() {
        return roomMap;
    }

    public List<Enemies> getEnemies() {
        return enemies;
    }

    public void createRoom(String filePath) {

        try {
            Scanner scan = new Scanner(new File(filePath));
            roomMap.clear();
            int i = 0;

            while (scan.hasNextLine()) {
                String row = scan.nextLine();

                // se elemento for cardinal, ignora e passa para o próximo
                if (row.startsWith("#")) {
                    continue;
                }
                String[] characters = row.split("");

                for (int j = 0; j < characters.length; j++) {
                    String letters = characters[j];
                    Position position = new Position(j, i);
                    roomMap.add(new Floor(position)); // piso como padrão

                    switch (letters) {
                        case "W":
                            roomMap.add(new Wall(position));
                            break;
                        case "0":
                            String[] door0Info = readHeaderForDoorInfo(filePath, 0);
                            Door newDoor0 = new Door(position, door0Info[0], 0, door0Info[2], door0Info[1]);
                            System.out.println("--------DOOR 0--------");
                            System.out.println("door 0 next room file is " + door0Info[0]);
                            System.out.println("door 0 next room door Id is " + door0Info[1]);
                            System.out.println("door 0 requires key: " + door0Info[2]);
                            roomMap.add(newDoor0);
                            break;
                        case "1":
                            String[] door1Info = readHeaderForDoorInfo(filePath, 1);
                            Door newDoor1 = new Door(position, door1Info[0], 1, door1Info[2], door1Info[1]);
                            System.out.println("--------DOOR 1--------");
                            System.out.println("door 1 next room file is " + door1Info[0]);
                            System.out.println("door 1 next room door Id is " + door1Info[1]);
                            System.out.println("door 1 requires key: " + door1Info[2]);
                            roomMap.add(newDoor1);
                            break;
                        case "2":
                            String[] door2Info = readHeaderForDoorInfo(filePath, 2);
                            Door newDoor2 = new Door(position, door2Info[0], 2, door2Info[2], door2Info[1]);
                            System.out.println("--------DOOR 2--------");
                            System.out.println("door 2 next room file is " + door2Info[0]);
                            System.out.println("door 2 next room door Id is " + door2Info[1]);
                            System.out.println("door 2 requires key: " + door2Info[2]);
                            roomMap.add(newDoor2);
                            break;
                        case " ":
                            roomMap.add(new Floor(position));
                            break;
                        case "B":
                            roomMap.add(new Bat(position));
                            break;
                        case "k":
                            String keyId = readKeyInfo(filePath);
                            roomMap.add(new Key(position, keyId));
                            System.out.println("key created with id " + keyId);
                            break;
                        case "S":
                            roomMap.add(new Skeleton(position));
                            break;
                        case "m":
                            roomMap.add(new GoodMeat(position));
                            break;
                        case "h":
                            roomMap.add(new Hammer(position));
                            break;
                        case "G":
                            roomMap.add(new BadGuy(position));
                            break;
                        case "T":
                            roomMap.add(new Thief(position));
                            break;
                        default:
                            System.out.print(" ");
                            break;
                    }
                }
                i++; // incrementar a minha String row
            }
            System.out.println("-------END------");
            scan.close(); // não esquecer de fechar o scanner!!!
        } catch (FileNotFoundException e) {
            System.out.println("File not found" + filePath);
        }
    }

    public boolean collisionHero(Position position) {
        for (ImageTile tile : roomMap) {
            // Se houver uma parede, o herói não pode passar
            if (tile instanceof Wall && tile.getPosition().equals(position)) {
                return true; // Bloqueia o movimento na parede
            }
            // Se o herói colidir com um inimigo, permite o movimento mas com ataque
            if (tile instanceof Enemies && tile.getPosition().equals(position)) {
                ((Enemies) tile).checkCombat(hero); // inimigo ataca heroi
                return false; // não permite que o herói se mova para cima do inimigo
                // se for true, ele permite que mova para cima, pós ataque
            }

            // Se o herói colidir com uma porta, ele também pode se mover (dependendo da lógica)
            if (tile instanceof Door && tile.getPosition().equals(position)) {
                return false; // Pode ser ajustado se portas bloquearem o movimento
            }
        }
        return false; // Se não houver obstáculos, o movimento é permitido
    }

    public boolean collisionEnemy(Position position, Enemies currentEnemy) {
        for (ImageTile tile : roomMap) {
            // Se houver uma parede, o inimigo não pode passar
            if (tile instanceof Wall && tile.getPosition().equals(position)) {
                return true; // Bloqueia o movimento na parede
            }
            // Se o inimigo colidir com o herói, ele não pode se mover para essa posição
            if (tile instanceof Hero && tile.getPosition().equals(position)) {
                return true; // Impede o inimigo de ir para a posição do herói
            }

            // Se o inimigo colidir com uma porta
            if (tile instanceof Door && tile.getPosition().equals(position)) {
                return true; // Impede o inimigo de passar pelas portas
            }

            // Se o inimigo colidir com outro inimigo
            if (tile instanceof Enemies otherEnemy && tile.getPosition().equals(position)) {
                if (!otherEnemy.equals(currentEnemy)) {
                    return true; // Bloqueia o movimento se houver outro inimigo nessa posição
                }
            }
        }
        return false;
    }

    public List<Door> getDoorsList() {
        List<Door> doorsList = new ArrayList<>();
        for (ImageTile tile : roomMap) {
            if (tile instanceof Door) {
                doorsList.add((Door) tile);
            }
        }
        return doorsList;
    }

    public void changeRooms(Hero hero, Door door) {
        System.out.println("------CHANGING ROOMS-------");
        if (!door.openDoor(hero, "key1")) { // verifica se a porta está trancada
            System.out.println("You need a key to open this door!");
            return;
        }
        String nextRoom = door.getNextRoom(); // vai buscar o nome da próxima sala
        System.out.println("this is the next room " + nextRoom);
        System.out.println("door number " + door.getNextRoomDoor());
        int nextRoomDoor = Integer.parseInt((door.getNextRoomDoor())); //busca o número da porta da próxima sala
        // e converte em int
        createRoom("rooms/rooms/" + nextRoom);// carrega o novo mapa "file"

        Position newDoorPosition = doorPosition(nextRoomDoor);//calcula a posição da porta na nova sala
        System.out.println("position of new door " + newDoorPosition);
        hero.setPosition(newDoorPosition); //faz "set" à posição do herói para essa porta
    }

    // encontra a posição da porta de destino
    private Position doorPosition(int doorID) {
        for (ImageTile tile : roomMap) {
            if (tile instanceof Door door) {
                if (door.getDoorId() == doorID) {
                    return door.getPosition();
                }
            }
        }
        return new Position(1, 1); // Posição padrão caso não encontre
    }

    public String[] readHeaderForDoorInfo(String filePath, int doorId) {
        try (Scanner scan = new Scanner(new File(filePath))) {
            while (scan.hasNextLine()) {
                String line = scan.nextLine().trim();

                //verifica se começa com # e se é seguido pelo número da porta
                if (line.startsWith("# " + doorId)) {
                    String[] parts = line.split("\\s+");

                    // estrutura: # ID D roomFile doorNumber [doorKey]
                    if (parts.length >= 4) {
                        String nextRoomFile = parts[3];
                        String nextRoomDoor = parts[4];
                        // se houver chave, vai extrair
                        String doorKey = (parts.length > 5) ? parts[5] : null;
                        return new String[]{nextRoomFile, nextRoomDoor, doorKey};
                    }
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + filePath);
        }
        return null;
    }

    public String readKeyInfo(String filePath) {
        try (Scanner scan = new Scanner(new File(filePath))) {
            while (scan.hasNextLine()) {
                String line = scan.nextLine();

                if (line.startsWith("# k")) {
                    String[] parts = line.split(" "); // fazer split

                    // estrutura tem de ter no mínimo 2 partes
                    if (parts.length >= 2) {
                        return parts[2]; // retorna key1 ou key2
                    }
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + filePath);
        }
        return null;
    }

    public void updateEnemies() {
        enemies.clear();
        for (ImageTile tile : getRoomMap()) {
            if (tile instanceof Enemies) {
                enemies.add((Enemies) tile);
            }
        }
    }
}
